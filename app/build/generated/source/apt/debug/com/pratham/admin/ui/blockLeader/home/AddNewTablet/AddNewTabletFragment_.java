//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.admin.ui.blockLeader.home.AddNewTablet;

import java.util.HashMap;
import java.util.Map;
import android.annotation.SuppressLint;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import com.pratham.admin.R;
import org.androidannotations.api.bean.BeanHolder;
import org.androidannotations.api.builder.FragmentBuilder;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

@SuppressLint({
    "NonConstantResourceId"
})
public final class AddNewTabletFragment_
    extends com.pratham.admin.ui.blockLeader.home.AddNewTablet.AddNewTabletFragment
    implements BeanHolder, HasViews, OnViewChangedListener
{
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private View contentView_;
    private final Map<Class<?> , Object> beans_ = new HashMap<Class<?> , Object>();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    @Override
    public<T extends View> T internalFindViewById(int id) {
        return ((T)((contentView_ == null)?null:contentView_.findViewById(id)));
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(R.layout.fragment_add_new_tablet, container, false);
        }
        return contentView_;
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        contentView_ = null;
        barcode_frame = null;
        spinner_vendor = null;
        spinner_donor = null;
        spinner_yearOfpurchase = null;
        et_brand = null;
        et_model = null;
        tv_serialNo = null;
        lv_newTabs = null;
        rl_spinnerParent = null;
        btn_sendTablets = null;
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static AddNewTabletFragment_.FragmentBuilder_ builder() {
        return new AddNewTabletFragment_.FragmentBuilder_();
    }

    @Override
    public<T> T getBean(Class<T> key) {
        return ((T) beans_.get(key));
    }

    @Override
    public<T> void putBean(Class<T> key, T value) {
        beans_.put(key, value);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        this.barcode_frame = hasViews.internalFindViewById(R.id.barcode_frame);
        this.spinner_vendor = hasViews.internalFindViewById(R.id.spinner_vendor);
        this.spinner_donor = hasViews.internalFindViewById(R.id.spinner_donor);
        this.spinner_yearOfpurchase = hasViews.internalFindViewById(R.id.spinner_yearOfPurchase);
        this.et_brand = hasViews.internalFindViewById(R.id.et_brand);
        this.et_model = hasViews.internalFindViewById(R.id.et_model);
        this.tv_serialNo = hasViews.internalFindViewById(R.id.tv_serialNo);
        this.lv_newTabs = hasViews.internalFindViewById(R.id.lv_newTabs);
        this.rl_spinnerParent = hasViews.internalFindViewById(R.id.rl_spinnerParent);
        this.btn_sendTablets = hasViews.internalFindViewById(R.id.btn_sendTablets);
        View view_iv_refresh = hasViews.internalFindViewById(R.id.iv_refresh);
        View view_btn_addToInventory = hasViews.internalFindViewById(R.id.btn_addToInventory);

        if (view_iv_refresh!= null) {
            view_iv_refresh.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    AddNewTabletFragment_.this.reset();
                }
            }
            );
        }
        if (view_btn_addToInventory!= null) {
            view_btn_addToInventory.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    AddNewTabletFragment_.this.addToInventory();
                }
            }
            );
        }
        if (this.btn_sendTablets!= null) {
            this.btn_sendTablets.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    AddNewTabletFragment_.this.sendTablet();
                }
            }
            );
        }
        init();
    }

    public static class FragmentBuilder_
        extends FragmentBuilder<AddNewTabletFragment_.FragmentBuilder_, com.pratham.admin.ui.blockLeader.home.AddNewTablet.AddNewTabletFragment>
    {

        @Override
        public com.pratham.admin.ui.blockLeader.home.AddNewTablet.AddNewTabletFragment build() {
            AddNewTabletFragment_ fragment_ = new AddNewTabletFragment_();
            fragment_.setArguments(args);
            return fragment_;
        }
    }
}
